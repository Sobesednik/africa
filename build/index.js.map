{"version":3,"sources":["../src/index.js"],"names":["africa","packageName","questions","config","Error","homedir","rcNameFunction","p","force","local","questionsTimeout","rc","path","homeEx","localPath","localEx","c","handleLocal","handleHome","conf","getParsed","parsed","forceQuestions","h","q","extendQuestions","current","Object","keys","reduce","acc","key","question","defaultValue","value"],"mappings":"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","sourcesContent":["import { resolve } from 'path'\nimport { homedir as home } from 'os'\nimport bosom from 'bosom'\nimport { exists, askQuestionsAndWrite } from './lib'\n\n/**\n * Read package configuration from the home directory, or ask questions with\n * readline interface to create a new configuration in `~/.${packageName}rc`\n * @param {string} packageName the name of the package\n * @param {Questions} questions an object with questions to be passed to reloquent\n * @param {AfricaConfig} [config] configuration object\n * @param {boolean} [config.force=false] Force asking questions and re-writing config. Default false.\n * @param {string} [config.homedir] Path to the home directory.\n * @param {string} [config.questionsTimeout] How log to wait before timing out. Will wait forever by default.\n * @param {string} [config.local] Look up for the `.rc` file in the current directory first, and use homedir if not found. When initialising, the local file will be created and default values for questions read from the home `.rc` if exists.. Default `false`.\n * @param {(s: string) => string} [config.rcNameFunction] Function used to generate the rc name\n */\nexport default async function africa(packageName, questions = {}, config = {}) {\n  if (typeof packageName != 'string') {\n    throw new Error('Package name is required.')\n  }\n  const {\n    homedir = home(),\n    rcNameFunction = p => `.${p}rc`,\n    force = false,\n    local = false,\n    questionsTimeout,\n  } = config\n\n  const rc = rcNameFunction(packageName)\n  const path = resolve(homedir, rc)\n\n  const homeEx = await exists(path)\n\n  if (local) {\n    const localPath = resolve(rc)\n    const localEx = await exists(localPath)\n    const c = await handleLocal(homeEx, localEx, path, localPath, questions, questionsTimeout, force)\n    return c\n  }\n\n  const c = await handleHome(homeEx, path, questions, questionsTimeout, force)\n  return c\n}\n\nconst handleHome = async (homeEx, path, questions, questionsTimeout, force) => {\n  if (!homeEx) {\n    const conf = await askQuestionsAndWrite(questions, path, questionsTimeout)\n    return conf\n  }\n  const p = await getParsed(path, questions, force, questionsTimeout)\n  return p\n}\n\nconst getParsed = async (path, questions, force, questionsTimeout) => {\n  const parsed = await bosom(path)\n  if (force) {\n    const c = await forceQuestions(questions, path, parsed, questionsTimeout)\n    return c\n  }\n  return parsed\n}\n\nconst handleLocal = async (homeEx, localEx, path, localPath, questions, questionsTimeout, force) => {\n  if (!localEx) {\n    const h = homeEx ? await bosom(path) : {}\n    const conf = await forceQuestions(questions, localPath, h, questionsTimeout)\n    return conf\n  }\n  const p = await getParsed(localPath, questions, force, questionsTimeout)\n  return p\n}\n\nconst forceQuestions = async (questions, path, config, questionsTimeout) => {\n  const q = extendQuestions(questions, config)\n  const conf = await askQuestionsAndWrite(q, path, questionsTimeout)\n  return conf\n}\n\n/**\n *\n * @param {Questions} questions A set of questions to extend with default value from the existing config.\n * @param {object} current Current configuration object.\n * @returns {Questions} Questions with updated defaultValue where answers were present in the passed config object.\n */\nconst extendQuestions = (questions, current) => {\n  const q = Object.keys(questions).reduce((acc, key) => {\n    const question = questions[key]\n    const defaultValue = current[key]\n    const value = {\n      ...question,\n      ...(defaultValue ? { defaultValue } : {}),\n    }\n\n    return {\n      ...acc,\n      [key]: value,\n    }\n  }, {})\n  return q\n}\n\n\n/**\n * @typedef {Object} Question\n * @property {string} text A text to show to the user.\n * @property {string} [defaultValue] A default answer to the question.\n * @property {function} [getDefault] A function which will get the default value, possibly asynchronously.\n * @property {function} [validation] A validation function which should throw on error.\n * @property {(s: string) => string} [postProcess] A transformation function for the answer.\n *\n * @typedef {Object.<string, Question>} Questions\n *\n * @typedef {Object} AfricaConfig\n * @property {boolean} [force=false] Force asking questions and re-writing config. Default false.\n * @property {string} [homedir] Path to the home directory.\n * @property {number} [questionsTimeout] How log to wait before timing out. Will wait forever by default.\n * @property {(s: string) => string} [rcNameFunction] Function used to generate the rc name, e.g., packageName => `.${packageName}rc`.\n * @property {string} [config.local] Look up for the `.rc` file in the current directory first, and use homedir if not found. When initialising, the local file will be created and default values for questions read from the home `.rc` if exists.. Default `false`.\n */\n"],"file":"index.js"}