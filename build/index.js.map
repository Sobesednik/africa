{"version":3,"sources":["../src/index.js"],"names":["exists","path","res","Promise","r","j","err","code","askQuestionsAndWrite","questions","answers","space","africa","packageName","config","Error","homedir","rcNameFunction","p","force","rc","ex","conf","parsed","q","extendQuestions","current","Object","keys","reduce","acc","key","question","defaultValue","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,SAAS,MAAOC,IAAP,IAAgB;AAC7B,QAAMC,MAAM,MAAM,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtC,kBAAKJ,IAAL,EAAYK,GAAD,IAAS;AAClB,UAAIA,OAAOA,IAAIC,IAAJ,IAAY,QAAvB,EAAiC;AAC/BH,UAAE,KAAF;AACD,OAFD,MAEO,IAAIE,GAAJ,EAAS;AACdD,UAAEC,GAAF;AACD,OAFM,MAEA;AACLF,UAAE,IAAF;AACD;AACF,KARD;AASD,GAViB,CAAlB;AAWA,SAAOF,GAAP;AACD,CAbD;AAeA;;;;;;;;;;;;;;;;;;;;AAoBA,eAAeM,oBAAf,CAAoCC,SAApC,EAA+CR,IAA/C,EAAqD;AACnD,QAAMS,UAAU,MAAM,wBAAID,SAAJ,CAAtB;AACA,QAAM,oBAAMR,IAAN,EAAYS,OAAZ,EAAqB;AAAEC,WAAO;AAAT,GAArB,CAAN;AACA,SAAOD,OAAP;AACD;AAED;;;;;;;;;;;;;;AAYe,eAAeE,MAAf,CAAsBC,WAAtB,EAAmCJ,YAAY,EAA/C,EAAmDK,SAAS,EAA5D,EAAgE;AAC7E,MAAI,OAAOD,WAAP,IAAsB,QAA1B,EAAoC;AAClC,UAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,QAAM;AACJC,cAAU,kBADN;AAEJC,qBAAiBC,KAAM,IAAGA,CAAE,IAFxB;AAGJC,YAAQ;AAHJ,MAIFL,MAJJ;AAMA,QAAMM,KAAKH,eAAeJ,WAAf,CAAX;AACA,QAAMZ,OAAO,mBAAQe,OAAR,EAAiBI,EAAjB,CAAb;AAEA,QAAMC,KAAK,MAAMrB,OAAOC,IAAP,CAAjB;;AACA,MAAI,CAACoB,EAAL,EAAS;AACP,UAAMC,OAAO,MAAMd,qBAAqBC,SAArB,EAAgCR,IAAhC,CAAnB;AACA,WAAOqB,IAAP;AACD;;AACD,QAAMC,SAAS,MAAM,oBAAMtB,IAAN,CAArB;;AACA,MAAIkB,KAAJ,EAAW;AACT,UAAMK,IAAIC,gBAAgBhB,SAAhB,EAA2Bc,MAA3B,CAAV;AACA,UAAMD,OAAO,MAAMd,qBAAqBgB,CAArB,EAAwBvB,IAAxB,CAAnB;AACA,WAAOqB,IAAP;AACD;;AACD,SAAOC,MAAP;AACD;AAED;;;;;;;;AAMA,MAAME,kBAAkB,CAAChB,SAAD,EAAYiB,OAAZ,KAAwB;AAC9C,QAAMF,IAAIG,OAAOC,IAAP,CAAYnB,SAAZ,EAAuBoB,MAAvB,CAA8B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpD,UAAMC,WAAWvB,UAAUsB,GAAV,CAAjB;AACA,UAAME,eAAeP,QAAQK,GAAR,CAArB;AACA,UAAMG,QAAQ,EACZ,GAAGF,QADS;AAEZ,UAAIC,eAAe;AAAEA;AAAF,OAAf,GAAkC,EAAtC;AAFY,KAAd;AAKA,WAAO,EACL,GAAGH,GADE;AAEL,OAACC,GAAD,GAAOG;AAFF,KAAP;AAID,GAZS,EAYP,EAZO,CAAV;AAaA,SAAOV,CAAP;AACD,CAfD","sourcesContent":["import { resolve } from 'path'\nimport { homedir as home } from 'os'\nimport ask from 'reloquent'\nimport bosom from 'bosom'\nimport { stat } from 'fs'\n\nconst exists = async (path) => {\n  const res = await new Promise((r, j) => {\n    stat(path, (err) => {\n      if (err && err.code == 'ENOENT') {\n        r(false)\n      } else if (err) {\n        j(err)\n      } else {\n        r(true)\n      }\n    })\n  })\n  return res\n}\n\n/**\n * @attach reloquent\n * @typedef {Object} Question\n * @property {string} text A text to show to the user.\n * @property {string} [defaultValue] A default answer to the question.\n * @property {function} [getDefault] A function which will get the default value, possibly asynchronously.\n * @property {function} [validation] A validation function which should throw on error.\n * @property {(s: string) => string} [postProcess] A transformation function for the answer.\n *\n * @typedef {Object.<string, Question>} Questions\n *\n * @typedef {Object} AfricaConfig\n * @property {boolean} [force=false] Force asking questions and re-writing config. Default false.\n * @property {string} [homedir] Path to the home directory.\n * @property {string} [defaultValue] A default answer to the question.\n * @property {number} [questionsTimeout] How log to wait before timing out. Will wait forever by default.\n * @property {(s: string) => string} [rcNameFunction] Function used to generate the rc name, e.g., packageName => `.${packageName}rc`,\n */\n\n\nasync function askQuestionsAndWrite(questions, path) {\n  const answers = await ask(questions)\n  await bosom(path, answers, { space: 2 })\n  return answers\n}\n\n/**\n * Read package configuration from the home directory, or ask questions with\n * readline interface to create a new configuration in `~/.${packageName}rc`\n * @param {string} packageName the name of the package\n * @param {Questions} questions an object with questions to be passed to reloquent\n * @param {AfricaConfig} [config] configuration object\n * @param {boolean} [config.force=false] Force asking questions and re-writing config. Default false.\n * @param {string} [config.homedir] Path to the home directory.\n * @param {string} [config.defaultValue] A default answer to the question.\n * @param {string} [config.questionsTimeout] How log to wait before timing out. Will wait forever by default.\n * @param {(s: string) => string} [config.rcNameFunction] Function used to generate the rc name\n */\nexport default async function africa(packageName, questions = {}, config = {}) {\n  if (typeof packageName != 'string') {\n    throw new Error('Package name is required.')\n  }\n  const {\n    homedir = home(),\n    rcNameFunction = p => `.${p}rc`,\n    force = false,\n  } = config\n\n  const rc = rcNameFunction(packageName)\n  const path = resolve(homedir, rc)\n\n  const ex = await exists(path)\n  if (!ex) {\n    const conf = await askQuestionsAndWrite(questions, path)\n    return conf\n  }\n  const parsed = await bosom(path)\n  if (force) {\n    const q = extendQuestions(questions, parsed)\n    const conf = await askQuestionsAndWrite(q, path)\n    return conf\n  }\n  return parsed\n}\n\n/**\n *\n * @param {Questions} questions A set of questions to extend with default value from the existing config.\n * @param {object} current Current configuration object.\n * @returns {Questions} Questions with updated defaultValue where answers were present in the passed config object.\n */\nconst extendQuestions = (questions, current) => {\n  const q = Object.keys(questions).reduce((acc, key) => {\n    const question = questions[key]\n    const defaultValue = current[key]\n    const value = {\n      ...question,\n      ...(defaultValue ? { defaultValue } : {}),\n    }\n\n    return {\n      ...acc,\n      [key]: value,\n    }\n  }, {})\n  return q\n}\n"],"file":"index.js"}